/*******************************************************************************
 *
 * Datinator (c) by Gerhard W. Gruber in 2014
 *
 *******************************************************************************/

#ifndef TEXT_MANIPULATOR_PANEL_H_INCLUDED
#define TEXT_MANIPULATOR_PANEL_H_INCLUDED

#include <QtWidgets/QFrame>
#include <QtCore/QList>
#include <QtCore/QPair>

#include "manipulator/text/text_panel_gui.h"
#include "manipulator/manipulator_panel_qt.moc"
#include "manipulator/text/selection.h"

class TextManipulator;

bool toPositionText(QList<QPair<int, int>> const &oPositionList, QString &oPositionText);
bool toPositionList(QString const &oPositionString, QList<QPair<int, int>> &oPositionList);

class TextManipulatorPanel
	:	public ManipulatorPanel
{
public:
	Q_OBJECT

public:
	TextManipulatorPanel(TextManipulator *oOwner, QWidget *oParent = NULL);
	virtual ~TextManipulatorPanel(void);

	void setAction(TextManipulatorAction nAction);
	TextManipulatorAction getAction(void) const;

	void setLength(int nMinLength, int nMaxLength, int nFillCharacter, bool bFillAtEnd);
	int getMinLength(void) const;
	int getMaxLength(void) const;
	int getFillCharacter(void) const;
	bool getFillAtEnd(void) const;

	/**
	 * Position is specified starting with 1. 0 and -1 are reserved.
	 * 0 means that the param  is not used. If the first param is 0 or -1
	 * it means range up to the second param.
	 * A single character is indicated by the first param being the value and
	 * the second value is 0.
	 * A range up to the end of the string is indicated by the first param
	 * as the value and the second param == -1.
	 * The second parameter may not be lower then the first. However, the
	 * individual parameters are independent from each other and don't need
	 * to be ordered.
	 * if false is returned, the list contains invalid combinations and is discarded.
	 *
	 * 1				1:0
	 * 1-				1:-1
	 * 1,4,..			1:0, 4:0, ...
	 * 1-4				1:4
	 * -1				0:1
	 * 3,-5,7-, ...		3:0, 0(or-1);5,7:-1
	 * 5,3,1-7, ...		5:0, 3:0, 1:7, ...
	 */
	bool setPositions(QList<QPair<int, int>> const &oPositionList);
	bool getPositions(QList<QPair<int, int>> &oPositionList) const;

	/**
	 * Sets/gets the positionlist as a string.
	 * if false is returned, the string doesn't contain a valid list.
	 */
	bool setPositionText(QString const &oPositionString);
	QString getPositionText(void) const;

	void setPattern(QString const &oPattern, bool bInvertSelection, bool bRegularExpression);
	bool getInvertSelection(void) const;
	bool getRegularExpression(void) const;
	QString getPattern(void) const;

	QString getText(void) const;
	void setText(QString const &oText);

protected:
	void disableAll(void);

protected slots:
	void onTextChanged(QString oText);		// Any of the text fields changed
	void onValueChanged(int);				// Any of the number fields or checkbox changed
	void onAction(int);						// Combobox selection

private:
	Ui::TextManipulatorGUI *mGUI;
};

#endif // TEXT_MANIPULATOR_PANEL_H_INCLUDED
